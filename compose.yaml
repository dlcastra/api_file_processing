services:
  web:
    container_name: main_app
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      run_db_migrations:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    networks:
      - app-network

  run_db_migrations:
    container_name: db_migrations
    build: .
    restart: "no"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    command: [ "sh", "-c", "alembic stamp head && alembic upgrade head" ]
    networks:
      - app-network

  db:
    container_name: postgresql_db
    image: postgres:latest
    restart: always
    user: postgres
    env_file:
      - .env
    environment:
      - DOCKERIZED=true
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - db-data:/var/lib/postgresql/data:rw
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  redis:
    container_name: redis
    image: redis:7.0-alpine
    restart: always
    expose:
      - "6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  db-data:

networks:
  app-network:
    driver: bridge